import React, { useState, ChangeEvent } from 'react';
import Modal from './Modal';
import CryptoJS from 'crypto-js';

const KeyManagement: React.FC = () => {
  const [key, setKey] = useState<string>('');
  const [showKey, setShowKey] = useState<boolean>(false);
  const [imported, setImported] = useState<boolean>(false);
  const [keyType, setKeyType] = useState<'privateKey' | 'pubFile'>(
    'privateKey',
  );
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [isSuccess, setIsSuccess] = useState(true);
  const [message, setMessage] = useState('');

  const handleImport = (e: ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (event: ProgressEvent<FileReader>) => {
        if (event.target?.result) {
          setKey(event.target.result as string);
          setImported(true);
        }
      };
      reader.readAsText(file);
    }
  };

  const handleSave = () => {
    console.log('Key saved:', key);
    setIsSuccess(true);
    setIsModalOpen(true);
    setMessage(
      'Your key will be remembered for next 30 minutes. Can encrypt your data using FHE and upload to filecoin.',
    );
  };

  const handleClear = () => {
    setKey('');
    setImported(false);
    setShowKey(false);
  };

  const handleKeyTypeChange = (e: ChangeEvent<HTMLSelectElement>) => {
    setKeyType(e.target.value as 'privateKey' | 'pubFile');
    setKey('');
    setImported(false);
    setShowKey(false);
  };

  const handleShowKey = () => {
    setShowKey(!showKey);
  };

  const handleExport = () => {
    const element = document.createElement('a');
    const file = new Blob([key], { type: 'text/plain' });
    element.href = URL.createObjectURL(file);
    element.download = 'key.enc';
    document.body.appendChild(element);
    element.click();
    document.body.removeChild(element);
  };

  const handleGenerateKey = () => {
    const randomKey = CryptoJS.lib.WordArray.random(32).toString();
    const blob = new Blob([randomKey], { type: 'text/plain' });

    const url = window.URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.setAttribute('download', 'generated_key.enc');

    document.body.appendChild(link);
    link.click();

    document.body.removeChild(link);
    window.URL.revokeObjectURL(url);

    setKey(randomKey);
    setImported(true);
  };

  return (
    <div className="max-w-full pr-32 mt-14 bg-white rounded-md">
      <Modal
        isOpen={isModalOpen}
        onClose={() => setIsModalOpen(false)}
        isSuccess={isSuccess}
        message={message}
      />

      <h1 className="text-3xl font-bold mb-6 text-left font-sans">
        Key Management
      </h1>
      <p className="mb-4 text-gray-600 bg-green-100 p-2 rounded-md font-cursive">
        The evaluation key is an .enc file generated by you to prove your
        identity. Import and save it here to be able to upload encrypted data.
      </p>
      <div className="mb-4">
        <label
          htmlFor="keyType"
          className="block mb-2 font-semibold font-cursive"
        >
          Key Type:
        </label>
        <select
          id="keyType"
          className="block w-full px-4 py-2 border rounded-md font-cursive"
          value={keyType}
          onChange={handleKeyTypeChange}
        >
          <option value="privateKey">Private Key</option>
          <option value="pubFile">Evaluation Key File</option>
        </select>
      </div>
      {keyType === 'privateKey' && (
        <div className="mb-4">
          <label
            htmlFor="privateKey"
            className="block mb-2 font-semibold font-cursive"
          >
            Private Key:
          </label>
          <textarea
            id="privateKey"
            className="block w-full px-4 py-2 border rounded-md font-cursive"
            value={showKey ? key : 'â€¢'.repeat(key.length)}
            onChange={(e: ChangeEvent<HTMLTextAreaElement>) =>
              setKey(e.target.value)
            }
            readOnly
          />
          <button
            className="mt-2 px-4 py-2 font-bold text-white bg-blue-500 rounded-full hover:bg-blue-700 focus:outline-none font-cursive"
            onClick={handleShowKey}
          >
            {showKey ? 'Hide Key' : 'Show Key'}
          </button>
        </div>
      )}
      {keyType === 'pubFile' && (
        <div className="mb-4">
          <label
            htmlFor="keyFile"
            className="block mb-2 font-semibold font-cursive"
          >
            Import Evaluation Key:
          </label>
          <label
            htmlFor="keyFile"
            className="btn border p-2 rounded-full hover:bg-gray-100 hover:cursor-pointer font-cursive"
          >
            Choose Key File
          </label>
          <input
            type="file"
            id="keyFile"
            style={{ display: 'none' }}
            onChange={handleImport}
          />
          <label
            htmlFor="optionalKey"
            className="block mt-4 mb-2 font-semibold font-cursive"
          >
            Enter Optional Key:
          </label>
          <textarea
            id="optionalKey"
            className="block w-full px-4 py-2 border rounded-md font-cursive"
            value={key}
            onChange={(e: ChangeEvent<HTMLTextAreaElement>) =>
              setKey(e.target.value)
            }
          />
        </div>
      )}
      <div className="flex justify-end space-x-4 mt-4">
        <button
          className="px-4 py-2 font-bold text-white bg-green-500 rounded-full hover:bg-green-700 focus:outline-none font-cursive"
          onClick={handleGenerateKey}
        >
          Generate .enc Key
        </button>
        <button
          className={`px-4 py-2 font-bold text-white bg-blue-500 rounded-full hover:bg-blue-700 focus:outline-none font-cursive ${
            !imported && 'opacity-50 cursor-not-allowed'
          }`}
          onClick={handleSave}
          disabled={!imported}
        >
          Save
        </button>
        <button
          className={`px-4 py-2 font-bold text-white bg-blue-500 rounded-full hover:bg-blue-700 focus:outline-none font-cursive ${
            !imported && 'opacity-50 cursor-not-allowed'
          }`}
          onClick={handleClear}
          disabled={!imported}
        >
          Clear
        </button>
        {/* <button
          className={`px-4 py-2 font-bold text-white bg-blue-500 rounded-full hover:bg-blue-700 focus:outline-none font-cursive ${
            !imported && 'opacity-50 cursor-not-allowed'
          }`}
          onClick={handleExport}
          disabled={!imported}
        >
          Export
        </button> */}
      </div>
    </div>
  );
};

export default KeyManagement;
